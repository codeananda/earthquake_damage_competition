diff --git a/analysis/bagging.ipynb b/analysis/bagging.ipynb
index f4f476f..fd7c30f 100644
--- a/analysis/bagging.ipynb
+++ b/analysis/bagging.ipynb
@@ -54,8 +54,8 @@
    "id": "anonymous-savannah",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-12T06:38:16.941068Z",
-     "start_time": "2021-03-12T06:38:14.640104Z"
+     "end_time": "2021-03-15T15:24:07.314289Z",
+     "start_time": "2021-03-15T15:24:04.121919Z"
     },
     "executionInfo": {
      "elapsed": 2001,
@@ -104,6 +104,21 @@
     "y = pd.read_csv(DOWNLOAD_DIR / 'train_labels.csv', index_col='building_id')"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "id": "boxed-upper",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2021-03-15T15:24:07.512273Z",
+     "start_time": "2021-03-15T15:24:07.509191Z"
+    }
+   },
+   "outputs": [],
+   "source": [
+    "sns.set()"
+   ]
+  },
   {
    "cell_type": "markdown",
    "id": "ON0gpfeJcjAo",
@@ -525,12 +540,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 3,
    "id": "determined-library",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-11T16:46:32.957425Z",
-     "start_time": "2021-03-11T16:46:31.474970Z"
+     "end_time": "2021-03-15T15:24:13.810793Z",
+     "start_time": "2021-03-15T15:24:12.232620Z"
     },
     "id": "determined-library",
     "outputId": "420f632a-92fb-4c29-c91a-826eaa443af9",
@@ -550,10 +565,8 @@
        "True"
       ]
      },
-     "execution_count": 2,
-     "metadata": {
-      "tags": []
-     },
+     "execution_count": 3,
+     "metadata": {},
      "output_type": "execute_result"
     }
    ],
@@ -564,12 +577,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 4,
    "id": "unexpected-desire",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-09T10:55:48.232889Z",
-     "start_time": "2021-03-09T10:55:37.445894Z"
+     "end_time": "2021-03-15T15:24:19.469825Z",
+     "start_time": "2021-03-15T15:24:13.987249Z"
     },
     "id": "unexpected-desire",
     "outputId": "48422de5-4bf7-46b4-8c37-24cf6c495ea7"
@@ -579,7 +592,7 @@
      "name": "stderr",
      "output_type": "stream",
      "text": [
-      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.21 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.22 is available!  To upgrade, please run:\n",
       "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n"
      ]
     },
@@ -588,49 +601,32 @@
       "text/html": [
        "\n",
        "                Tracking run with wandb version 0.10.15<br/>\n",
-       "                Syncing run <strong style=\"color:#cdcd00\">efficient-mountain-1</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Syncing run <strong style=\"color:#cdcd00\">jumping-resonance-3</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
        "                Project page: <a href=\"https://wandb.ai/theadammurphy/earthquake_damage_competition\" target=\"_blank\">https://wandb.ai/theadammurphy/earthquake_damage_competition</a><br/>\n",
-       "                Run page: <a href=\"https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/2ol1e3kn\" target=\"_blank\">https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/2ol1e3kn</a><br/>\n",
-       "                Run data is saved locally in <code>/Users/king/Google Drive/Work/Delivery/Current/earthquake_damage_competition/analysis/wandb/run-20210309_125537-2ol1e3kn</code><br/><br/>\n",
+       "                Run page: <a href=\"https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/2xrnubhb\" target=\"_blank\">https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/2xrnubhb</a><br/>\n",
+       "                Run data is saved locally in <code>/Users/king/Google Drive/Work/Delivery/Current/earthquake_damage_competition/analysis/wandb/run-20210315_172413-2xrnubhb</code><br/><br/>\n",
        "            "
       ],
       "text/plain": [
        "<IPython.core.display.HTML object>"
       ]
      },
-     "metadata": {
-      "tags": []
-     },
+     "metadata": {},
      "output_type": "display_data"
-    },
-    {
-     "data": {
-      "text/html": [
-       "<h1>Run(2ol1e3kn)</h1><iframe src=\"https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/2ol1e3kn\" style=\"border:none;width:100%;height:400px\"></iframe>"
-      ],
-      "text/plain": [
-       "<wandb.sdk.wandb_run.Run at 0x1351fafd0>"
-      ]
-     },
-     "execution_count": 3,
-     "metadata": {
-      "tags": []
-     },
-     "output_type": "execute_result"
     }
    ],
    "source": [
-    "wandb.init(project='earthquake_damage_competition')"
+    "run = wandb.init(project='earthquake_damage_competition')"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 15,
+   "execution_count": 5,
    "id": "documentary-victoria",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-12T06:26:31.169308Z",
-     "start_time": "2021-03-12T06:26:31.154661Z"
+     "end_time": "2021-03-15T15:24:19.676054Z",
+     "start_time": "2021-03-15T15:24:19.671433Z"
     },
     "id": "documentary-victoria",
     "outputId": "023863ce-fc30-4800-bff8-17a5b793b0d8"
@@ -642,7 +638,7 @@
        "(86868, 38)"
       ]
      },
-     "execution_count": 15,
+     "execution_count": 5,
      "metadata": {},
      "output_type": "execute_result"
     }
@@ -653,12 +649,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 6,
    "id": "stock-companion",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-12T06:38:25.810617Z",
-     "start_time": "2021-03-12T06:38:25.801128Z"
+     "end_time": "2021-03-15T15:24:19.818633Z",
+     "start_time": "2021-03-15T15:24:19.804052Z"
     },
     "executionInfo": {
      "elapsed": 587,
@@ -686,12 +682,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 3,
+   "execution_count": 7,
    "id": "brief-karma",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-12T06:38:26.661700Z",
-     "start_time": "2021-03-12T06:38:26.245510Z"
+     "end_time": "2021-03-15T15:24:20.494575Z",
+     "start_time": "2021-03-15T15:24:19.962861Z"
     },
     "executionInfo": {
      "elapsed": 830,
@@ -714,12 +710,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 4,
+   "execution_count": 8,
    "id": "possible-neighbor",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-12T06:38:26.890245Z",
-     "start_time": "2021-03-12T06:38:26.853798Z"
+     "end_time": "2021-03-15T15:24:20.704068Z",
+     "start_time": "2021-03-15T15:24:20.663235Z"
     },
     "executionInfo": {
      "elapsed": 517,
@@ -745,12 +741,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 9,
    "id": "confidential-elimination",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-12T06:38:27.143251Z",
-     "start_time": "2021-03-12T06:38:27.140456Z"
+     "end_time": "2021-03-15T15:24:20.862876Z",
+     "start_time": "2021-03-15T15:24:20.859200Z"
     },
     "executionInfo": {
      "elapsed": 559,
@@ -773,12 +769,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 6,
+   "execution_count": 10,
    "id": "adaptive-dietary",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-12T06:38:28.123131Z",
-     "start_time": "2021-03-12T06:38:28.120267Z"
+     "end_time": "2021-03-15T15:24:23.530270Z",
+     "start_time": "2021-03-15T15:24:23.527237Z"
     },
     "executionInfo": {
      "elapsed": 414,
@@ -803,12 +799,12 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 11,
    "id": "judicial-error",
    "metadata": {
     "ExecuteTime": {
-     "end_time": "2021-03-12T06:38:29.064999Z",
-     "start_time": "2021-03-12T06:38:29.059736Z"
+     "end_time": "2021-03-15T15:24:24.063026Z",
+     "start_time": "2021-03-15T15:24:24.056677Z"
     },
     "executionInfo": {
      "elapsed": 569,
@@ -859,7 +855,7 @@
     "    \"\"\"\n",
     "    # Does not work for binary classification, preds has a different form\n",
     "    # in that case\n",
-    "    assert num_classs > 2\n",
+    "    assert num_class > 2\n",
     "    \n",
     "    preds_for_ith_row = [preds[class_label * num_data + i]\n",
     "                        for class_label in range(num_class)]\n",
@@ -1641,7 +1637,8 @@
      "user_tz": -120
     },
     "id": "entertaining-mathematics",
-    "outputId": "5fc9f5a6-2a7e-47a7-eacc-3e13f4277639"
+    "outputId": "5fc9f5a6-2a7e-47a7-eacc-3e13f4277639",
+    "scrolled": true
    },
    "outputs": [
     {
@@ -2080,24 +2077,411 @@
    ]
   },
   {
-   "cell_type": "code",
-   "execution_count": null,
-   "id": "addressed-discovery",
+   "cell_type": "markdown",
+   "id": "forward-solid",
    "metadata": {
     "id": "addressed-discovery"
    },
+   "source": [
+    "## Validating Bagged Models\n",
+    "\n",
+    "Let's build one model first and see how we can interact with it. I want to get some plots to see how we can use validation data. But using the LGBM API is SO MUCH BETTER than using the sklearn API for LightGBM, so let's play with this and see what happens."
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 18,
+   "id": "imposed-international",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2021-03-15T15:29:27.764067Z",
+     "start_time": "2021-03-15T15:29:27.580717Z"
+    }
+   },
    "outputs": [],
-   "source": []
+   "source": [
+    "from sklearn.model_selection import train_test_split\n",
+    "\n",
+    "X_train, X_val, y_train, y_val = train_test_split(X_all_ints, y, test_size=0.25,\n",
+    "                                                 random_state=42, stratify=y)\n",
+    "\n",
+    "full_train_data = lgb.Dataset(X_all_ints,\n",
+    "                             label=y,\n",
+    "                             feature_name=list(cols_ordered_after_ordinal_encoding),\n",
+    "                             categorical_feature=list(cat_cols_plus_geo),\n",
+    "                             free_raw_data=False)\n",
+    "\n",
+    "train_data = lgb.Dataset(X_train,\n",
+    "                        label=y_train,\n",
+    "                        feature_name=list(cols_ordered_after_ordinal_encoding),\n",
+    "                        categorical_feature=list(cat_cols_plus_geo),\n",
+    "                        free_raw_data=False)\n",
+    "\n",
+    "val_data = lgb.Dataset(X_val,\n",
+    "                      label=y_val,\n",
+    "                      feature_name=list(cols_ordered_after_ordinal_encoding),\n",
+    "                      categorical_feature=list(cat_cols_plus_geo),\n",
+    "                      free_raw_data=False)"
+   ]
+  },
+  {
+   "cell_type": "markdown",
+   "id": "devoted-pipeline",
+   "metadata": {},
+   "source": [
+    "### DO I NEED TO SET CATEGORICAL_FEATURE AND FEATURE_NAME IN LGB.TRAIN IF I HAVE SET THEM IN THE LGB.DATASET OBJECT?"
+   ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 47,
+   "id": "endless-marker",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2021-03-15T15:46:38.192135Z",
+     "start_time": "2021-03-15T15:46:26.403274Z"
+    },
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "Finishing last run (ID:1o0xbdfs) before initializing another..."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<br/>Waiting for W&B process to finish, PID 21456<br/>Program ended successfully."
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "application/vnd.jupyter.widget-view+json": {
+       "model_id": "",
+       "version_major": 2,
+       "version_minor": 0
+      },
+      "text/plain": [
+       "VBox(children=(Label(value=' 1.87MB of 1.87MB uploaded (0.00MB deduped)\\r'), FloatProgress(value=1.0, max=1.0)…"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find user logs for this run at: <code>/Users/king/Google Drive/Work/Delivery/Current/earthquake_damage_competition/analysis/wandb/run-20210315_174542-1o0xbdfs/logs/debug.log</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Find internal logs for this run at: <code>/Users/king/Google Drive/Work/Delivery/Current/earthquake_damage_competition/analysis/wandb/run-20210315_174542-1o0xbdfs/logs/debug-internal.log</code>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<h3>Run summary:</h3><br/><style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
+       "    </style><table class=\"wandb\">\n",
+       "<tr><td>train_multi_logloss</td><td>0.73355</td></tr><tr><td>train_multi_error</td><td>0.37321</td></tr><tr><td>train_f1</td><td>0.62679</td></tr><tr><td>val_multi_logloss</td><td>0.7418</td></tr><tr><td>val_multi_error</td><td>0.37415</td></tr><tr><td>val_f1</td><td>0.62585</td></tr><tr><td>_step</td><td>7</td></tr><tr><td>_runtime</td><td>23</td></tr><tr><td>_timestamp</td><td>1615823170</td></tr></table>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "<h3>Run history:</h3><br/><style>\n",
+       "    table.wandb td:nth-child(1) { padding: 0 10px; text-align: right }\n",
+       "    </style><table class=\"wandb\">\n",
+       "<tr><td>train_multi_logloss</td><td>█▇▅▄▃▃▂▁</td></tr><tr><td>train_multi_error</td><td>███████▁</td></tr><tr><td>train_f1</td><td>▁▁▁▁▁▁▁█</td></tr><tr><td>val_multi_logloss</td><td>█▇▅▄▃▃▂▁</td></tr><tr><td>val_multi_error</td><td>███████▁</td></tr><tr><td>val_f1</td><td>▁▁▁▁▁▁▁█</td></tr><tr><td>_step</td><td>▁▂▃▄▅▆▇█</td></tr><tr><td>_runtime</td><td>▁▂▃▄▅▆▇█</td></tr><tr><td>_timestamp</td><td>▁▂▃▄▅▆▇█</td></tr></table><br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "Synced 6 W&B file(s), 0 media file(s), 0 artifact file(s) and 2 other file(s)"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                    <br/>Synced <strong style=\"color:#cdcd00\">swept-sun-9</strong>: <a href=\"https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/1o0xbdfs\" target=\"_blank\">https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/1o0xbdfs</a><br/>\n",
+       "                "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "data": {
+      "text/html": [
+       "...Successfully finished last run (ID:1o0xbdfs). Initializing new run:<br/><br/>"
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "\u001b[34m\u001b[1mwandb\u001b[0m: wandb version 0.10.22 is available!  To upgrade, please run:\n",
+      "\u001b[34m\u001b[1mwandb\u001b[0m:  $ pip install wandb --upgrade\n"
+     ]
+    },
+    {
+     "data": {
+      "text/html": [
+       "\n",
+       "                Tracking run with wandb version 0.10.15<br/>\n",
+       "                Syncing run <strong style=\"color:#cdcd00\">happy-planet-10</strong> to <a href=\"https://wandb.ai\" target=\"_blank\">Weights & Biases</a> <a href=\"https://docs.wandb.com/integrations/jupyter.html\" target=\"_blank\">(Documentation)</a>.<br/>\n",
+       "                Project page: <a href=\"https://wandb.ai/theadammurphy/earthquake_damage_competition\" target=\"_blank\">https://wandb.ai/theadammurphy/earthquake_damage_competition</a><br/>\n",
+       "                Run page: <a href=\"https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/ic91gsob\" target=\"_blank\">https://wandb.ai/theadammurphy/earthquake_damage_competition/runs/ic91gsob</a><br/>\n",
+       "                Run data is saved locally in <code>/Users/king/Google Drive/Work/Delivery/Current/earthquake_damage_competition/analysis/wandb/run-20210315_174626-ic91gsob</code><br/><br/>\n",
+       "            "
+      ],
+      "text/plain": [
+       "<IPython.core.display.HTML object>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "param = {'num_leaves': 120,\n",
+    "         'min_child_samples': 40,\n",
+    "         'learning_rate': 0.04,\n",
+    "         'num_boost_round': 40,\n",
+    "         'early_stopping_round': -1,\n",
+    "         'boosting_type': 'goss',\n",
+    "         'objective': 'multiclassova',\n",
+    "         'is_unbalance': True,\n",
+    "         'metric': ['multiclassova', 'multi_error'],\n",
+    "         'num_class': 3,\n",
+    "         'verbosity': -1,\n",
+    "         'num_threads': 8,\n",
+    "         'seed': 1}\n",
+    "\n",
+    "run = wandb.init(project='earthquake_damage_competition',\n",
+    "                 config=param)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 48,
+   "id": "minor-peace",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2021-03-15T15:47:58.870252Z",
+     "start_time": "2021-03-15T15:46:38.194376Z"
+    },
+    "scrolled": true
+   },
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "[1]\ttrain's multi_logloss: 0.86709\ttrain's multi_error: 0.431087\ttrain's f1: 0.568913\tval's multi_logloss: 0.868732\tval's multi_error: 0.431091\tval's f1: 0.568909\n",
+      "[2]\ttrain's multi_logloss: 0.831244\ttrain's multi_error: 0.431087\ttrain's f1: 0.568913\tval's multi_logloss: 0.834333\tval's multi_error: 0.431091\tval's f1: 0.568909\n",
+      "[3]\ttrain's multi_logloss: 0.801294\ttrain's multi_error: 0.431087\ttrain's f1: 0.568913\tval's multi_logloss: 0.805764\tval's multi_error: 0.431091\tval's f1: 0.568909\n",
+      "[4]\ttrain's multi_logloss: 0.775383\ttrain's multi_error: 0.431087\ttrain's f1: 0.568913\tval's multi_logloss: 0.78109\tval's multi_error: 0.431091\tval's f1: 0.568909\n",
+      "[5]\ttrain's multi_logloss: 0.752396\ttrain's multi_error: 0.431087\ttrain's f1: 0.568913\tval's multi_logloss: 0.759438\tval's multi_error: 0.431091\tval's f1: 0.568909\n",
+      "[6]\ttrain's multi_logloss: 0.731944\ttrain's multi_error: 0.361095\ttrain's f1: 0.638905\tval's multi_logloss: 0.740098\tval's multi_error: 0.362251\tval's f1: 0.637749\n",
+      "[7]\ttrain's multi_logloss: 0.713466\ttrain's multi_error: 0.332018\ttrain's f1: 0.667982\tval's multi_logloss: 0.722796\tval's multi_error: 0.332781\tval's f1: 0.667219\n",
+      "[8]\ttrain's multi_logloss: 0.696699\ttrain's multi_error: 0.312177\ttrain's f1: 0.687823\tval's multi_logloss: 0.707165\tval's multi_error: 0.312367\tval's f1: 0.687633\n",
+      "[9]\ttrain's multi_logloss: 0.681366\ttrain's multi_error: 0.300026\ttrain's f1: 0.699974\tval's multi_logloss: 0.692891\tval's multi_error: 0.301546\tval's f1: 0.698454\n",
+      "[10]\ttrain's multi_logloss: 0.667249\ttrain's multi_error: 0.293497\ttrain's f1: 0.706503\tval's multi_logloss: 0.679881\tval's multi_error: 0.296097\tval's f1: 0.703903\n",
+      "[11]\ttrain's multi_logloss: 0.654213\ttrain's multi_error: 0.28506\ttrain's f1: 0.71494\tval's multi_logloss: 0.667993\tval's multi_error: 0.288422\tval's f1: 0.711578\n",
+      "[12]\ttrain's multi_logloss: 0.642158\ttrain's multi_error: 0.271128\ttrain's f1: 0.728872\tval's multi_logloss: 0.656916\tval's multi_error: 0.276696\tval's f1: 0.723304\n",
+      "[13]\ttrain's multi_logloss: 0.630963\ttrain's multi_error: 0.26154\ttrain's f1: 0.73846\tval's multi_logloss: 0.646675\tval's multi_error: 0.269651\tval's f1: 0.730349\n",
+      "[14]\ttrain's multi_logloss: 0.620516\ttrain's multi_error: 0.256879\ttrain's f1: 0.743121\tval's multi_logloss: 0.637224\tval's multi_error: 0.266228\tval's f1: 0.733772\n",
+      "[15]\ttrain's multi_logloss: 0.610748\ttrain's multi_error: 0.253922\ttrain's f1: 0.746078\tval's multi_logloss: 0.62838\tval's multi_error: 0.264186\tval's f1: 0.735814\n",
+      "[16]\ttrain's multi_logloss: 0.601502\ttrain's multi_error: 0.25097\ttrain's f1: 0.74903\tval's multi_logloss: 0.6201\tval's multi_error: 0.262697\tval's f1: 0.737303\n",
+      "[17]\ttrain's multi_logloss: 0.592867\ttrain's multi_error: 0.249537\ttrain's f1: 0.750463\tval's multi_logloss: 0.612439\tval's multi_error: 0.261684\tval's f1: 0.738316\n",
+      "[18]\ttrain's multi_logloss: 0.584786\ttrain's multi_error: 0.248959\ttrain's f1: 0.751041\tval's multi_logloss: 0.605303\tval's multi_error: 0.261301\tval's f1: 0.738699\n",
+      "[19]\ttrain's multi_logloss: 0.577232\ttrain's multi_error: 0.248821\ttrain's f1: 0.751179\tval's multi_logloss: 0.598586\tval's multi_error: 0.262099\tval's f1: 0.737901\n",
+      "[20]\ttrain's multi_logloss: 0.570023\ttrain's multi_error: 0.248503\ttrain's f1: 0.751497\tval's multi_logloss: 0.592273\tval's multi_error: 0.263158\tval's f1: 0.736842\n",
+      "[21]\ttrain's multi_logloss: 0.563182\ttrain's multi_error: 0.248452\ttrain's f1: 0.751548\tval's multi_logloss: 0.586307\tval's multi_error: 0.263849\tval's f1: 0.736151\n",
+      "[22]\ttrain's multi_logloss: 0.556685\ttrain's multi_error: 0.248273\ttrain's f1: 0.751727\tval's multi_logloss: 0.580682\tval's multi_error: 0.264862\tval's f1: 0.735138\n",
+      "[23]\ttrain's multi_logloss: 0.550626\ttrain's multi_error: 0.24859\ttrain's f1: 0.75141\tval's multi_logloss: 0.575429\tval's multi_error: 0.266366\tval's f1: 0.733634\n",
+      "[24]\ttrain's multi_logloss: 0.544908\ttrain's multi_error: 0.249199\ttrain's f1: 0.750801\tval's multi_logloss: 0.570546\tval's multi_error: 0.267701\tval's f1: 0.732299\n",
+      "[25]\ttrain's multi_logloss: 0.539412\ttrain's multi_error: 0.249844\ttrain's f1: 0.750156\tval's multi_logloss: 0.565878\tval's multi_error: 0.268085\tval's f1: 0.731915\n",
+      "[26]\ttrain's multi_logloss: 0.53511\ttrain's multi_error: 0.250842\ttrain's f1: 0.749158\tval's multi_logloss: 0.561884\tval's multi_error: 0.268822\tval's f1: 0.731178\n",
+      "[27]\ttrain's multi_logloss: 0.531183\ttrain's multi_error: 0.251896\ttrain's f1: 0.748104\tval's multi_logloss: 0.55833\tval's multi_error: 0.269773\tval's f1: 0.730227\n",
+      "[28]\ttrain's multi_logloss: 0.5274\ttrain's multi_error: 0.252351\ttrain's f1: 0.747649\tval's multi_logloss: 0.554878\tval's multi_error: 0.270495\tval's f1: 0.729505\n",
+      "[29]\ttrain's multi_logloss: 0.52381\ttrain's multi_error: 0.253313\ttrain's f1: 0.746687\tval's multi_logloss: 0.551661\tval's multi_error: 0.270771\tval's f1: 0.729229\n",
+      "[30]\ttrain's multi_logloss: 0.520388\ttrain's multi_error: 0.254213\ttrain's f1: 0.745787\tval's multi_logloss: 0.548567\tval's multi_error: 0.271661\tval's f1: 0.728339\n",
+      "[31]\ttrain's multi_logloss: 0.517102\ttrain's multi_error: 0.254899\ttrain's f1: 0.745101\tval's multi_logloss: 0.545616\tval's multi_error: 0.272168\tval's f1: 0.727832\n",
+      "[32]\ttrain's multi_logloss: 0.514042\ttrain's multi_error: 0.255487\ttrain's f1: 0.744513\tval's multi_logloss: 0.542793\tval's multi_error: 0.272598\tval's f1: 0.727402\n",
+      "[33]\ttrain's multi_logloss: 0.511095\ttrain's multi_error: 0.255922\ttrain's f1: 0.744078\tval's multi_logloss: 0.540228\tval's multi_error: 0.273472\tval's f1: 0.726528\n",
+      "[34]\ttrain's multi_logloss: 0.508274\ttrain's multi_error: 0.256582\ttrain's f1: 0.743418\tval's multi_logloss: 0.537813\tval's multi_error: 0.273841\tval's f1: 0.726159\n",
+      "[35]\ttrain's multi_logloss: 0.505615\ttrain's multi_error: 0.257442\ttrain's f1: 0.742558\tval's multi_logloss: 0.535462\tval's multi_error: 0.274716\tval's f1: 0.725284\n",
+      "[36]\ttrain's multi_logloss: 0.503027\ttrain's multi_error: 0.258184\ttrain's f1: 0.741816\tval's multi_logloss: 0.533276\tval's multi_error: 0.275514\tval's f1: 0.724486\n",
+      "[37]\ttrain's multi_logloss: 0.500593\ttrain's multi_error: 0.258736\ttrain's f1: 0.741264\tval's multi_logloss: 0.531131\tval's multi_error: 0.276542\tval's f1: 0.723458\n",
+      "[38]\ttrain's multi_logloss: 0.498306\ttrain's multi_error: 0.259064\ttrain's f1: 0.740936\tval's multi_logloss: 0.52914\tval's multi_error: 0.277049\tval's f1: 0.722951\n",
+      "[39]\ttrain's multi_logloss: 0.496089\ttrain's multi_error: 0.259893\ttrain's f1: 0.740107\tval's multi_logloss: 0.527233\tval's multi_error: 0.277448\tval's f1: 0.722552\n",
+      "[40]\ttrain's multi_logloss: 0.493909\ttrain's multi_error: 0.260046\ttrain's f1: 0.739954\tval's multi_logloss: 0.525402\tval's multi_error: 0.277571\tval's f1: 0.722429\n"
+     ]
+    }
+   ],
+   "source": [
+    "from wandb.lightgbm import wandb_callback\n",
+    "\n",
+    "evals_result = {}\n",
+    "booster = lgb.train(dict(wandb.config), # doesn't work if I pass wandb.config\n",
+    "                    train_data,\n",
+    "#                     100, # let's see if this works by setting it in param instead\n",
+    "                    # You can include train_data in the valid_set to easily\n",
+    "                    # make plots of the loss functions\n",
+    "                    valid_sets=[train_data, val_data],\n",
+    "                    valid_names=['train', 'val'],\n",
+    "                    evals_result=evals_result,\n",
+    "#                     early_stopping_rounds=None,\n",
+    "                    categorical_feature=list(cat_cols_plus_geo),\n",
+    "                    feval=lgb_f1_micro,\n",
+    "                    callbacks=[wandb_callback()])"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 49,
    "id": "graduate-workstation",
    "metadata": {
+    "ExecuteTime": {
+     "end_time": "2021-03-15T15:47:59.150220Z",
+     "start_time": "2021-03-15T15:47:58.872946Z"
+    },
     "id": "graduate-workstation"
    },
-   "outputs": [],
-   "source": []
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "f1_plot = lgb.plot_metric(evals_result, metric='f1',\n",
+    "                          title='F1 (micro) score for validation and training')\n",
+    "wandb.log({'f1_score plot': wandb.Image(f1_plot)})\n",
+    "plt.show()"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 50,
+   "id": "figured-catch",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2021-03-15T15:47:59.379376Z",
+     "start_time": "2021-03-15T15:47:59.152102Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "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\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "log_loss_plot = lgb.plot_metric(evals_result, metric='multi_logloss',\n",
+    "                title='Multi Log Loss for validation and training')\n",
+    "wandb.log({'multi logloss plot': wandb.Image(log_loss_plot)})"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 51,
+   "id": "commercial-objective",
+   "metadata": {
+    "ExecuteTime": {
+     "end_time": "2021-03-15T15:47:59.634062Z",
+     "start_time": "2021-03-15T15:47:59.380672Z"
+    }
+   },
+   "outputs": [
+    {
+     "data": {
+      "image/png": "\n",
+      "text/plain": [
+       "<Figure size 432x288 with 1 Axes>"
+      ]
+     },
+     "metadata": {},
+     "output_type": "display_data"
+    }
+   ],
+   "source": [
+    "multierror_plot = lgb.plot_metric(evals_result, metric='multi_error',\n",
+    "                title='Multi Error for validation and training')\n",
+    "wandb.log({'multi error plot': wandb.Image(multierror_plot)})"
+   ]
   },
   {
    "cell_type": "code",
diff --git a/analysis/wandb/latest-run b/analysis/wandb/latest-run
index 8951ed4..aca55ab 120000
--- a/analysis/wandb/latest-run
+++ b/analysis/wandb/latest-run
@@ -1 +1 @@
-run-20210309_125537-2ol1e3kn
\ No newline at end of file
+run-20210315_174906-1xdkrwpl
\ No newline at end of file
